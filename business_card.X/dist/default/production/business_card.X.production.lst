

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jul 03 22:30:03 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC12F1822 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0095                     	;# 
    84  0096                     	;# 
    85  0097                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  010C                     	;# 
    95  0111                     	;# 
    96  0112                     	;# 
    97  0115                     	;# 
    98  0116                     	;# 
    99  0117                     	;# 
   100  0118                     	;# 
   101  0119                     	;# 
   102  011A                     	;# 
   103  011B                     	;# 
   104  011D                     	;# 
   105  011D                     	;# 
   106  018C                     	;# 
   107  0191                     	;# 
   108  0191                     	;# 
   109  0192                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0199                     	;# 
   117  019A                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019C                     	;# 
   123  019C                     	;# 
   124  019D                     	;# 
   125  019E                     	;# 
   126  019F                     	;# 
   127  020C                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0291                     	;# 
   144  0291                     	;# 
   145  0292                     	;# 
   146  0293                     	;# 
   147  0294                     	;# 
   148  0295                     	;# 
   149  0295                     	;# 
   150  0296                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  039A                     	;# 
   155  039C                     	;# 
   156  039D                     	;# 
   157  039E                     	;# 
   158  039F                     	;# 
   159  0FE4                     	;# 
   160  0FE5                     	;# 
   161  0FE6                     	;# 
   162  0FE7                     	;# 
   163  0FE8                     	;# 
   164  0FE9                     	;# 
   165  0FEA                     	;# 
   166  0FEB                     	;# 
   167  0FED                     	;# 
   168  0FEE                     	;# 
   169  0FEF                     	;# 
   170                           
   171                           	psect	idataCOMMON
   172  01AD                     __pidataCOMMON:	
   173                           
   174                           ;initializer for _sampleButton
   175  01AD  3401               	retlw	1
   176                           
   177                           ;initializer for _period
   178  01AE  3401               	retlw	1
   179                           
   180                           	psect	idataBANK0
   181  01AF                     __pidataBANK0:	
   182                           
   183                           ;initializer for _number
   184  01AF  3401               	retlw	1
   185                           
   186                           ;initializer for _newPeriod
   187  01B0  3401               	retlw	1
   188                           
   189                           	psect	stringtext1
   190  01B1                     __pstringtext1:	
   191  01B1                     _buttonSampleThresh:	
   192  01B1  3405               	retlw	5
   193  01B2                     __end_of_buttonSampleThresh:	
   194                           
   195                           	psect	stringtext2
   196  0197                     __pstringtext2:	
   197  0197                     main@PIN_LOW:	
   198  0197  3401               	retlw	1
   199  0198  3400               	retlw	0
   200  0199  3402               	retlw	2
   201  019A  3401               	retlw	1
   202  019B  3405               	retlw	5
   203  019C  3402               	retlw	2
   204  019D  3405               	retlw	5
   205  019E  3401               	retlw	1
   206  019F  3402               	retlw	2
   207  01A0  3400               	retlw	0
   208  01A1  3400               	retlw	0
   209  01A2                     __end_ofmain@PIN_LOW:	
   210                           
   211                           	psect	stringtext3
   212  01A2                     __pstringtext3:	
   213  01A2                     main@PIN_HIGH:	
   214  01A2  3400               	retlw	0
   215  01A3  3401               	retlw	1
   216  01A4  3401               	retlw	1
   217  01A5  3402               	retlw	2
   218  01A6  3402               	retlw	2
   219  01A7  3405               	retlw	5
   220  01A8  3401               	retlw	1
   221  01A9  3405               	retlw	5
   222  01AA  3400               	retlw	0
   223  01AB  3402               	retlw	2
   224  01AC  3407               	retlw	7
   225  01AD                     __end_ofmain@PIN_HIGH:	
   226  000B                     _INTCON	set	11
   227  000C                     _PORTA	set	12
   228  000C                     _PORTAbits	set	12
   229  005A                     _T0IF	set	90
   230  005D                     _T0IE	set	93
   231  0095                     _OPTION_REG	set	149
   232  008C                     _TRISA	set	140
   233  009D                     _ADCON0	set	157
   234  0099                     _OSCCON	set	153
   235  018C                     _ANSELA	set	396
   236  020C                     _WPUA	set	524
   237                           
   238                           ; #config settings
   239  0000                     
   240                           	psect	cinit
   241  0087                     start_initialization:	
   242  0087                     __initialization:	
   243                           
   244                           ; Initialize objects allocated to COMMON
   245  0087  21AD               	fcall	__pidataCOMMON	;fetch initializer
   246  0088  00F9               	movwf	__pdataCOMMON& (0+127)
   247  0089  21AE               	fcall	__pidataCOMMON+1	;fetch initializer
   248  008A  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   249                           
   250                           ; Initialize objects allocated to BANK0
   251  008B  21AF               	fcall	__pidataBANK0	;fetch initializer
   252  008C  00B0               	movwf	__pdataBANK0& (0+127)
   253  008D  21B0               	fcall	__pidataBANK0+1	;fetch initializer
   254  008E  00B1               	movwf	(__pdataBANK0+1)& (0+127)
   255                           
   256                           ; Clear objects allocated to COMMON
   257  008F  01F6               	clrf	__pbssCOMMON& (0+127)
   258  0090  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   259  0091  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   260                           
   261                           ; Clear objects allocated to BANK0
   262  0092  01AE               	clrf	__pbssBANK0& (0+127)
   263  0093  01AF               	clrf	(__pbssBANK0+1)& (0+127)
   264  0094                     end_of_initialization:	
   265                           ;End of C runtime variable initialization code
   266                           
   267  0094                     __end_of__initialization:	
   268  0094  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   269  0095  0020               	movlb	0
   270  0096  2897               	ljmp	_main	;jump to C main() function
   271                           
   272                           	psect	bssCOMMON
   273  0076                     __pbssCOMMON:	
   274  0076                     _buttonCountB:	
   275  0076                     	ds	1
   276  0077                     _buttonCountA:	
   277  0077                     	ds	1
   278  0078                     _count:	
   279  0078                     	ds	1
   280                           
   281                           	psect	dataCOMMON
   282  0079                     __pdataCOMMON:	
   283  0079                     _sampleButton:	
   284  0079                     	ds	1
   285  007A                     _period:	
   286  007A                     	ds	1
   287                           
   288                           	psect	bssBANK0
   289  002E                     __pbssBANK0:	
   290  002E                     _buttonB:	
   291  002E                     	ds	1
   292  002F                     _buttonA:	
   293  002F                     	ds	1
   294                           
   295                           	psect	dataBANK0
   296  0030                     __pdataBANK0:	
   297  0030                     _number:	
   298  0030                     	ds	1
   299  0031                     _newPeriod:	
   300  0031                     	ds	1
   301                           
   302                           	psect	cstackCOMMON
   303  0070                     __pcstackCOMMON:	
   304  0070                     ?_isr:	
   305  0070                     ??_isr:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_main:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313  0070                     	ds	3
   314  0073                     ??_main:	
   315                           
   316                           ; 1 bytes @ 0x3
   317  0073                     	ds	3
   318                           
   319                           	psect	cstackBANK0
   320  0020                     __pcstackBANK0:	
   321  0020                     main@buttonReleasedA:	
   322                           
   323                           ; 1 bytes @ 0x0
   324  0020                     	ds	1
   325  0021                     main@buttonReleasedB:	
   326                           
   327                           ; 1 bytes @ 0x1
   328  0021                     	ds	1
   329  0022                     main@bitOn:	
   330                           
   331                           ; 2 bytes @ 0x2
   332  0022                     	ds	2
   333  0024                     main@buttonBoth:	
   334                           
   335                           ; 1 bytes @ 0x4
   336  0024                     	ds	1
   337  0025                     _main$211:	
   338                           
   339                           ; 1 bytes @ 0x5
   340  0025                     	ds	1
   341  0026                     main@buttonPrevA:	
   342                           
   343                           ; 1 bytes @ 0x6
   344  0026                     	ds	1
   345  0027                     main@buttonPrevB:	
   346                           
   347                           ; 1 bytes @ 0x7
   348  0027                     	ds	1
   349  0028                     main@dispNumber:	
   350                           
   351                           ; 1 bytes @ 0x8
   352  0028                     	ds	1
   353  0029                     main@singleStep:	
   354                           
   355                           ; 1 bytes @ 0x9
   356  0029                     	ds	1
   357  002A                     main@buttonPressedA:	
   358                           
   359                           ; 1 bytes @ 0xA
   360  002A                     	ds	1
   361  002B                     main@buttonPressedB:	
   362                           
   363                           ; 1 bytes @ 0xB
   364  002B                     	ds	1
   365  002C                     main@i:	
   366                           
   367                           ; 2 bytes @ 0xC
   368  002C                     	ds	2
   369                           
   370                           	psect	maintext
   371  0097                     __pmaintext:	
   372 ;;
   373 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   374 ;;
   375 ;; *************** function _main *****************
   376 ;; Defined at:
   377 ;;		line 75 in file "main.c"
   378 ;; Parameters:    Size  Location     Type
   379 ;;		None
   380 ;; Auto vars:     Size  Location     Type
   381 ;;  bitOn           2    2[BANK0 ] int 
   382 ;;  i               2   12[BANK0 ] int 
   383 ;;  buttonBoth      1    4[BANK0 ] unsigned char 
   384 ;;  buttonPresse    1   11[BANK0 ] unsigned char 
   385 ;;  buttonPresse    1   10[BANK0 ] unsigned char 
   386 ;;  singleStep      1    9[BANK0 ] unsigned char 
   387 ;;  dispNumber      1    8[BANK0 ] unsigned char 
   388 ;;  buttonPrevB     1    7[BANK0 ] unsigned char 
   389 ;;  buttonPrevA     1    6[BANK0 ] unsigned char 
   390 ;;  buttonReleas    1    1[BANK0 ] unsigned char 
   391 ;;  buttonReleas    1    0[BANK0 ] unsigned char 
   392 ;; Return value:  Size  Location     Type
   393 ;;                  1    wreg      void 
   394 ;; Registers used:
   395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   396 ;; Tracked objects:
   397 ;;		On entry : B1F/0
   398 ;;		On exit  : 0/0
   399 ;;		Unchanged: 0/0
   400 ;; Data sizes:     COMMON   BANK0   BANK1
   401 ;;      Params:         0       0       0
   402 ;;      Locals:         0      14       0
   403 ;;      Temps:          3       0       0
   404 ;;      Totals:         3      14       0
   405 ;;Total ram usage:       17 bytes
   406 ;; Hardware stack levels required when called:    1
   407 ;; This function calls:
   408 ;;		Nothing
   409 ;; This function is called by:
   410 ;;		Startup code after reset
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414                           
   415                           ;psect for function _main
   416  0097                     _main:	
   417                           
   418                           ;main.c: 76: OSCCON = 0xF0;
   419                           
   420                           ;incstack = 0
   421                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath]
   422  0097  30F0               	movlw	240
   423  0098  0021               	movlb	1	; select bank1
   424  0099  0099               	movwf	25	;volatile
   425                           
   426                           ;main.c: 77: ANSELA = 0;
   427  009A  0023               	movlb	3	; select bank3
   428  009B  018C               	clrf	12	;volatile
   429                           
   430                           ;main.c: 78: ADCON0 = 0;
   431  009C  0021               	movlb	1	; select bank1
   432  009D  019D               	clrf	29	;volatile
   433                           
   434                           ;main.c: 79: TRISA = (1<<3)|(1<<4);
   435  009E  3018               	movlw	24
   436  009F  008C               	movwf	12	;volatile
   437                           
   438                           ;main.c: 80: PORTA = 0;
   439  00A0  0020               	movlb	0	; select bank0
   440  00A1  018C               	clrf	12	;volatile
   441                           
   442                           ;main.c: 81: WPUA = 0;
   443  00A2  0024               	movlb	4	; select bank4
   444  00A3  018C               	clrf	12	;volatile
   445                           
   446                           ;main.c: 84: OPTION_REG=0b10000110;
   447  00A4  3086               	movlw	134
   448  00A5  0021               	movlb	1	; select bank1
   449  00A6  0095               	movwf	21	;volatile
   450                           
   451                           ;main.c: 85: INTCON=0b10100000;
   452  00A7  30A0               	movlw	160
   453  00A8  008B               	movwf	11	;volatile
   454                           
   455                           ;main.c: 87: static const unsigned char PIN_HIGH[11] = {0,1,1,2,2,5,1,5,0,2,7};
   456                           ;main.c: 88: static const unsigned char PIN_LOW[11] = {1,0,2,1,5,2,5,1,2,0,0};
   457                           ;main.c: 90: unsigned char singleStep = 0;
   458  00A9  0020               	movlb	0	; select bank0
   459  00AA  01A9               	clrf	main@singleStep
   460                           
   461                           ;main.c: 91: unsigned char dispNumber = 1;
   462  00AB  01A8               	clrf	main@dispNumber
   463  00AC  0AA8               	incf	main@dispNumber,f
   464                           
   465                           ;main.c: 93: unsigned char buttonPrevA = 0;
   466  00AD  01A6               	clrf	main@buttonPrevA
   467                           
   468                           ;main.c: 94: unsigned char buttonPrevB = 0;
   469  00AE  01A7               	clrf	main@buttonPrevB
   470                           
   471                           ;main.c: 95: unsigned char buttonPressedA = 0;
   472  00AF  01AA               	clrf	main@buttonPressedA
   473                           
   474                           ;main.c: 96: unsigned char buttonPressedB = 0;
   475  00B0  01AB               	clrf	main@buttonPressedB
   476                           
   477                           ;main.c: 97: unsigned char buttonReleasedA = 0;
   478  00B1  01A0               	clrf	main@buttonReleasedA
   479                           
   480                           ;main.c: 98: unsigned char buttonReleasedB = 0;
   481  00B2  01A1               	clrf	main@buttonReleasedB
   482  00B3                     l857:	
   483                           ;main.c: 100: while(1)
   484                           
   485                           
   486                           ;main.c: 101: {
   487                           ;main.c: 104: (buttonPrevA == 1 && buttonA == 0) ? buttonPressedA = 1 : buttonPressedA =
      +                           0;
   488  00B3  0020               	movlb	0	; select bank0
   489  00B4  0326               	decf	main@buttonPrevA,w
   490  00B5  1D03               	btfss	3,2
   491  00B6  28BD               	goto	l863
   492  00B7  082F               	movf	_buttonA,w	;volatile
   493  00B8  1D03               	btfss	3,2
   494  00B9  28BD               	goto	l863
   495  00BA  01AA               	clrf	main@buttonPressedA
   496  00BB  0AAA               	incf	main@buttonPressedA,f
   497  00BC  28BE               	goto	l865
   498  00BD                     l863:	
   499  00BD  01AA               	clrf	main@buttonPressedA
   500  00BE                     l865:	
   501                           
   502                           ;main.c: 105: (buttonPrevB == 1 && buttonB == 0) ? buttonPressedB = 1 : buttonPressedB =
      +                           0;
   503  00BE  0327               	decf	main@buttonPrevB,w
   504  00BF  1D03               	btfss	3,2
   505  00C0  28C7               	goto	l871
   506  00C1  082E               	movf	_buttonB,w	;volatile
   507  00C2  1D03               	btfss	3,2
   508  00C3  28C7               	goto	l871
   509  00C4  01AB               	clrf	main@buttonPressedB
   510  00C5  0AAB               	incf	main@buttonPressedB,f
   511  00C6  28C8               	goto	l873
   512  00C7                     l871:	
   513  00C7  01AB               	clrf	main@buttonPressedB
   514  00C8                     l873:	
   515                           
   516                           ;main.c: 107: (buttonPrevA == 0 && buttonA == 1) ? buttonReleasedA = 1 : buttonReleasedA
      +                           = 0;
   517  00C8  0826               	movf	main@buttonPrevA,w
   518  00C9  1D03               	btfss	3,2
   519  00CA  28D1               	goto	l879
   520  00CB  032F               	decf	_buttonA,w	;volatile
   521  00CC  1D03               	btfss	3,2
   522  00CD  28D1               	goto	l879
   523  00CE  01A0               	clrf	main@buttonReleasedA
   524  00CF  0AA0               	incf	main@buttonReleasedA,f
   525  00D0  28D2               	goto	l881
   526  00D1                     l879:	
   527  00D1  01A0               	clrf	main@buttonReleasedA
   528  00D2                     l881:	
   529                           
   530                           ;main.c: 108: (buttonPrevB == 0 && buttonB == 1) ? buttonReleasedB = 1 : buttonReleasedB
      +                           = 0;
   531  00D2  0827               	movf	main@buttonPrevB,w
   532  00D3  1D03               	btfss	3,2
   533  00D4  28DB               	goto	l887
   534  00D5  032E               	decf	_buttonB,w	;volatile
   535  00D6  1D03               	btfss	3,2
   536  00D7  28DB               	goto	l887
   537  00D8  01A1               	clrf	main@buttonReleasedB
   538  00D9  0AA1               	incf	main@buttonReleasedB,f
   539  00DA  28DC               	goto	l889
   540  00DB                     l887:	
   541  00DB  01A1               	clrf	main@buttonReleasedB
   542  00DC                     l889:	
   543                           
   544                           ;main.c: 109: buttonPrevA = buttonA;
   545  00DC  082F               	movf	_buttonA,w	;volatile
   546  00DD  00F3               	movwf	??_main
   547  00DE  0873               	movf	??_main,w
   548  00DF  00A6               	movwf	main@buttonPrevA
   549                           
   550                           ;main.c: 110: buttonPrevB = buttonB;
   551  00E0  082E               	movf	_buttonB,w	;volatile
   552  00E1  00F3               	movwf	??_main
   553  00E2  0873               	movf	??_main,w
   554  00E3  00A7               	movwf	main@buttonPrevB
   555                           
   556                           ;main.c: 113: unsigned char buttonBoth = ((!buttonA && buttonPressedB) || (!buttonB && b
      +                          uttonPressedA));
   557  00E4  01A5               	clrf	_main$211
   558  00E5  0AA5               	incf	_main$211,f
   559  00E6  082F               	movf	_buttonA,w	;volatile
   560  00E7  1D03               	btfss	3,2
   561  00E8  28EC               	goto	l899
   562  00E9  082B               	movf	main@buttonPressedB,w
   563  00EA  1D03               	btfss	3,2
   564  00EB  28F3               	goto	l905
   565  00EC                     l899:	
   566  00EC  082E               	movf	_buttonB,w	;volatile
   567  00ED  1D03               	btfss	3,2
   568  00EE  28F2               	goto	l903
   569  00EF  082A               	movf	main@buttonPressedA,w
   570  00F0  1D03               	btfss	3,2
   571  00F1  28F3               	goto	l905
   572  00F2                     l903:	
   573  00F2  01A5               	clrf	_main$211
   574  00F3                     l905:	
   575  00F3  0825               	movf	_main$211,w
   576  00F4  00F3               	movwf	??_main
   577  00F5  0873               	movf	??_main,w
   578  00F6  00A4               	movwf	main@buttonBoth
   579                           
   580                           ;main.c: 114: if (buttonBoth)
   581  00F7  0824               	movf	main@buttonBoth,w
   582  00F8  1903               	btfsc	3,2
   583  00F9  2907               	goto	l913
   584                           
   585                           ;main.c: 115: {
   586                           ;main.c: 116: singleStep = !singleStep;
   587  00FA  0829               	movf	main@singleStep,w
   588  00FB  1D03               	btfss	3,2
   589  00FC  28FF               	goto	u700
   590  00FD  3001               	movlw	1
   591  00FE  2900               	goto	u710
   592  00FF                     u700:	
   593  00FF  3000               	movlw	0
   594  0100                     u710:	
   595  0100  00F3               	movwf	??_main
   596  0101  0873               	movf	??_main,w
   597  0102  00A9               	movwf	main@singleStep
   598                           
   599                           ;main.c: 117: number = dispNumber;
   600  0103  0828               	movf	main@dispNumber,w
   601  0104  00F3               	movwf	??_main
   602  0105  0873               	movf	??_main,w
   603  0106  00B0               	movwf	_number	;volatile
   604  0107                     l913:	
   605                           
   606                           ;main.c: 118: }
   607                           ;main.c: 120: if (singleStep)
   608  0107  0829               	movf	main@singleStep,w
   609  0108  1903               	btfsc	3,2
   610  0109  2916               	goto	l94
   611                           
   612                           ;main.c: 121: {
   613                           ;main.c: 122: if (buttonPressedA) dispNumber--;
   614  010A  082A               	movf	main@buttonPressedA,w
   615  010B  1903               	btfsc	3,2
   616  010C  290F               	goto	l95
   617  010D  3001               	movlw	1
   618  010E  02A8               	subwf	main@dispNumber,f
   619  010F                     l95:	
   620                           
   621                           ;main.c: 123: if (buttonPressedB) dispNumber++;
   622  010F  082B               	movf	main@buttonPressedB,w
   623  0110  1903               	btfsc	3,2
   624  0111  2916               	goto	l94
   625  0112  3001               	movlw	1
   626  0113  00F3               	movwf	??_main
   627  0114  0873               	movf	??_main,w
   628  0115  07A8               	addwf	main@dispNumber,f
   629  0116                     l94:	
   630                           
   631                           ;main.c: 125: }
   632                           ;main.c: 128: if (!singleStep)
   633  0116  0829               	movf	main@singleStep,w
   634  0117  1D03               	btfss	3,2
   635  0118  2931               	goto	l933
   636                           
   637                           ;main.c: 129: {
   638                           ;main.c: 130: if (buttonPressedA && (newPeriod < 210)) newPeriod += 10;
   639  0119  082A               	movf	main@buttonPressedA,w
   640  011A  1903               	btfsc	3,2
   641  011B  2924               	goto	l98
   642  011C  30D2               	movlw	210
   643  011D  0231               	subwf	_newPeriod,w	;volatile
   644  011E  1803               	skipnc
   645  011F  2924               	goto	l98
   646  0120  300A               	movlw	10
   647  0121  00F3               	movwf	??_main
   648  0122  0873               	movf	??_main,w
   649  0123  07B1               	addwf	_newPeriod,f	;volatile
   650  0124                     l98:	
   651                           
   652                           ;main.c: 131: if (buttonPressedB && (newPeriod > 11)) newPeriod -= 10;
   653  0124  082B               	movf	main@buttonPressedB,w
   654  0125  1903               	btfsc	3,2
   655  0126  292D               	goto	l931
   656  0127  300C               	movlw	12
   657  0128  0231               	subwf	_newPeriod,w	;volatile
   658  0129  1C03               	skipc
   659  012A  292D               	goto	l931
   660  012B  300A               	movlw	10
   661  012C  02B1               	subwf	_newPeriod,f	;volatile
   662  012D                     l931:	
   663                           
   664                           ;main.c: 133: dispNumber = number;
   665  012D  0830               	movf	_number,w	;volatile
   666  012E  00F3               	movwf	??_main
   667  012F  0873               	movf	??_main,w
   668  0130  00A8               	movwf	main@dispNumber
   669  0131                     l933:	
   670                           
   671                           ;main.c: 134: }
   672                           ;main.c: 137: for(int i = 0; i <= 7; i++)
   673  0131  01AC               	clrf	main@i
   674  0132  01AD               	clrf	main@i+1
   675  0133                     L1:	
   676  0133  082D               	movf	main@i+1,w
   677  0134  3A80               	xorlw	128
   678  0135  00F3               	movwf	??_main
   679  0136  3080               	movlw	128
   680  0137  0273               	subwf	??_main,w
   681  0138  3008               	movlw	8
   682  0139  1903               	btfsc	3,2
   683  013A  022C               	subwf	main@i,w
   684  013B  1803               	btfsc	3,0
   685  013C  28B3               	goto	l857
   686                           
   687                           ;main.c: 138: {
   688                           ;main.c: 139: int bitOn = ((dispNumber >> i) & 1);
   689  013D  0020               	movlb	0	; select bank0
   690  013E  0828               	movf	main@dispNumber,w
   691  013F  00F3               	movwf	??_main
   692  0140  0A2C               	incf	main@i,w
   693  0141  2943               	goto	u814
   694  0142                     u815:	
   695  0142  36F3               	lsrf	??_main,f
   696  0143                     u814:	
   697  0143  0B89               	decfsz	9,f
   698  0144  2942               	goto	u815
   699  0145  0873               	movf	??_main,w
   700  0146  3901               	andlw	1
   701  0147  00F4               	movwf	??_main+1
   702  0148  01F5               	clrf	??_main+2
   703  0149  0874               	movf	??_main+1,w
   704  014A  00A2               	movwf	main@bitOn
   705  014B  0875               	movf	??_main+2,w
   706  014C  00A3               	movwf	main@bitOn+1
   707                           
   708                           ;main.c: 140: PORTA = 0;
   709  014D  018C               	clrf	12	;volatile
   710                           
   711                           ;main.c: 141: if (bitOn)
   712  014E  0822               	movf	main@bitOn,w
   713  014F  0423               	iorwf	main@bitOn+1,w
   714  0150  1903               	btfsc	3,2
   715  0151  298A               	goto	l947
   716                           
   717                           ;main.c: 142: {
   718                           ;main.c: 143: TRISA = 0xFF & ~(1<<PIN_LOW[i]|1<<PIN_HIGH[i]);
   719  0152  3001               	movlw	1
   720  0153  00F3               	movwf	??_main
   721  0154  082D               	movf	main@i+1,w
   722  0155  0085               	movwf	5
   723  0156  082C               	movf	main@i,w
   724  0157  0084               	movwf	4
   725  0158  30A2               	movlw	low (main@PIN_HIGH| (0+32768))
   726  0159  0784               	addwf	4,f
   727  015A  3081               	movlw	high (main@PIN_HIGH| (0+32768))
   728  015B  3D85               	addwfc	5,f
   729  015C  0800               	movf	0,w	;code access
   730  015D  0A89               	incf	9,f
   731  015E  2960               	goto	u834
   732  015F                     u835:	
   733  015F  35F3               	lslf	??_main,f
   734  0160                     u834:	
   735  0160  0B89               	decfsz	9,f
   736  0161  295F               	goto	u835
   737  0162  3001               	movlw	1
   738  0163  00F4               	movwf	??_main+1
   739  0164  082D               	movf	main@i+1,w
   740  0165  0085               	movwf	5
   741  0166  082C               	movf	main@i,w
   742  0167  0084               	movwf	4
   743  0168  3097               	movlw	low (main@PIN_LOW| (0+32768))
   744  0169  0784               	addwf	4,f
   745  016A  3081               	movlw	high (main@PIN_LOW| (0+32768))
   746  016B  3D85               	addwfc	5,f
   747  016C  0800               	movf	0,w	;code access
   748  016D  0A89               	incf	9,f
   749  016E  2970               	goto	u844
   750  016F                     u845:	
   751  016F  35F4               	lslf	??_main+1,f
   752  0170                     u844:	
   753  0170  0B89               	decfsz	9,f
   754  0171  296F               	goto	u845
   755  0172  0874               	movf	??_main+1,w
   756  0173  0473               	iorwf	??_main,w
   757  0174  3AFF               	xorlw	255
   758  0175  0021               	movlb	1	; select bank1
   759  0176  008C               	movwf	12	;volatile
   760                           
   761                           ;main.c: 144: PORTA = (1<<PIN_HIGH[i]);
   762  0177  3001               	movlw	1
   763  0178  00F3               	movwf	??_main
   764  0179  0020               	movlb	0	; select bank0
   765  017A  082D               	movf	main@i+1,w
   766  017B  0085               	movwf	5
   767  017C  082C               	movf	main@i,w
   768  017D  0084               	movwf	4
   769  017E  30A2               	movlw	low (main@PIN_HIGH| (0+32768))
   770  017F  0784               	addwf	4,f
   771  0180  3081               	movlw	high (main@PIN_HIGH| (0+32768))
   772  0181  3D85               	addwfc	5,f
   773  0182  0800               	movf	0,w	;code access
   774  0183  0A89               	incf	9,f
   775  0184  2986               	goto	u854
   776  0185                     u855:	
   777  0185  35F3               	lslf	??_main,f
   778  0186                     u854:	
   779  0186  0B89               	decfsz	9,f
   780  0187  2985               	goto	u855
   781  0188  0873               	movf	??_main,w
   782  0189  008C               	movwf	12	;volatile
   783  018A                     l947:	
   784                           
   785                           ;main.c: 145: }
   786                           ;main.c: 146: _delay((unsigned long)((1)*(40000000/4000.0)));
   787  018A  300D               	movlw	13
   788  018B  00F3               	movwf	??_main
   789  018C  30FC               	movlw	252
   790  018D                     u877:	
   791  018D  0B89               	decfsz	9,f
   792  018E  298D               	goto	u877
   793  018F  0BF3               	decfsz	??_main,f
   794  0190  298D               	goto	u877
   795  0191  3001               	movlw	1
   796  0192  0020               	movlb	0	; select bank0
   797  0193  07AC               	addwf	main@i,f
   798  0194  3000               	movlw	0
   799  0195  3DAD               	addwfc	main@i+1,f
   800  0196  2933               	goto	L1
   801  0197                     __end_of_main:	
   802                           
   803                           	psect	intentry
   804  0004                     __pintentry:	
   805 ;; *************** function _isr *****************
   806 ;; Defined at:
   807 ;;		line 32 in file "main.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;		None
   810 ;; Auto vars:     Size  Location     Type
   811 ;;		None
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1
   821 ;;      Params:         0       0       0
   822 ;;      Locals:         0       0       0
   823 ;;      Temps:          3       0       0
   824 ;;      Totals:         3       0       0
   825 ;;Total ram usage:        3 bytes
   826 ;; Hardware stack levels used:    1
   827 ;; This function calls:
   828 ;;		Nothing
   829 ;; This function is called by:
   830 ;;		Interrupt level 1
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834  0004                     _isr:	
   835                           
   836                           ;incstack = 0
   837  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   838                           
   839                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath]
   840  0005  3180               	pagesel	$
   841  0006  0020               	movlb	0	; select bank0
   842  0007  087F               	movf	127,w
   843  0008  00F2               	movwf	??_isr+2
   844                           
   845                           ;main.c: 35: if((T0IE==1) && (T0IF==1))
   846  0009  1A8B               	btfsc	11,5	;volatile
   847  000A  1D0B               	btfss	11,2	;volatile
   848  000B  2882               	goto	i1l65
   849                           
   850                           ;main.c: 36: {
   851                           ;main.c: 37: T0IF = 0;
   852  000C  110B               	bcf	11,2	;volatile
   853                           
   854                           ;main.c: 44: if (period == count)
   855  000D  087A               	movf	_period,w	;volatile
   856  000E  0678               	xorwf	_count,w	;volatile
   857  000F  1D03               	skipz
   858  0010  2816               	goto	i1l789
   859                           
   860                           ;main.c: 45: {
   861                           ;main.c: 46: count = 0;
   862  0011  01F8               	clrf	_count	;volatile
   863                           
   864                           ;main.c: 47: number++;
   865  0012  3001               	movlw	1
   866  0013  00F0               	movwf	??_isr
   867  0014  0870               	movf	??_isr,w
   868  0015  07B0               	addwf	_number,f	;volatile
   869  0016                     i1l789:	
   870                           
   871                           ;main.c: 48: }
   872                           ;main.c: 51: if (!count) period = newPeriod;
   873  0016  0878               	movf	_count,w	;volatile
   874  0017  1D03               	btfss	3,2
   875  0018  281D               	goto	i1l793
   876  0019  0831               	movf	_newPeriod,w	;volatile
   877  001A  00F0               	movwf	??_isr
   878  001B  0870               	movf	??_isr,w
   879  001C  00FA               	movwf	_period	;volatile
   880  001D                     i1l793:	
   881                           
   882                           ;main.c: 53: count++;
   883  001D  3001               	movlw	1
   884  001E  00F0               	movwf	??_isr
   885  001F  0870               	movf	??_isr,w
   886  0020  07F8               	addwf	_count,f	;volatile
   887                           
   888                           ;main.c: 55: sampleButton ^= 1;
   889  0021  3001               	movlw	1
   890  0022  00F0               	movwf	??_isr
   891  0023  0870               	movf	??_isr,w
   892  0024  06F9               	xorwf	_sampleButton,f	;volatile
   893                           
   894                           ;main.c: 57: if (sampleButton)
   895  0025  0879               	movf	_sampleButton,w	;volatile
   896  0026  1903               	btfsc	3,2
   897  0027  2882               	goto	i1l65
   898                           
   899                           ;main.c: 58: {
   900                           ;main.c: 61: if (PORTAbits.RA3 && (buttonCountA < buttonSampleThresh + 2)) buttonCountA+
      +                          +;
   901  0028  1D8C               	btfss	12,3	;volatile
   902  0029  2842               	goto	i1l805
   903  002A  30B1               	movlw	low (_buttonSampleThresh| (0+32768))
   904  002B  0084               	movwf	4
   905  002C  3081               	movlw	high (_buttonSampleThresh| (0+32768))
   906  002D  0085               	movwf	5
   907  002E  0800               	movf	0,w	;code access
   908  002F  3E02               	addlw	2
   909  0030  00F0               	movwf	??_isr
   910  0031  3000               	movlw	0
   911  0032  1803               	skipnc
   912  0033  3001               	movlw	1
   913  0034  00F1               	movwf	??_isr+1
   914  0035  0871               	movf	??_isr+1,w
   915  0036  3A80               	xorlw	128
   916  0037  3C80               	sublw	128
   917  0038  1D03               	skipz
   918  0039  283C               	goto	u50_25
   919  003A  0870               	movf	??_isr,w
   920  003B  0277               	subwf	_buttonCountA,w	;volatile
   921  003C                     u50_25:	
   922  003C  1803               	skipnc
   923  003D  2842               	goto	i1l805
   924  003E  3001               	movlw	1
   925  003F  00F0               	movwf	??_isr
   926  0040  0870               	movf	??_isr,w
   927  0041  07F7               	addwf	_buttonCountA,f	;volatile
   928  0042                     i1l805:	
   929                           
   930                           ;main.c: 62: if (!PORTAbits.RA3) buttonCountA = 0;
   931  0042  0020               	movlb	0	; select bank0
   932  0043  1D8C               	btfss	12,3	;volatile
   933  0044  01F7               	clrf	_buttonCountA	;volatile
   934                           
   935                           ;main.c: 64: if (PORTAbits.RA4 && (buttonCountB < buttonSampleThresh + 2)) buttonCountB+
      +                          +;
   936  0045  1E0C               	btfss	12,4	;volatile
   937  0046  285F               	goto	i1l815
   938  0047  30B1               	movlw	low (_buttonSampleThresh| (0+32768))
   939  0048  0084               	movwf	4
   940  0049  3081               	movlw	high (_buttonSampleThresh| (0+32768))
   941  004A  0085               	movwf	5
   942  004B  0800               	movf	0,w	;code access
   943  004C  3E02               	addlw	2
   944  004D  00F0               	movwf	??_isr
   945  004E  3000               	movlw	0
   946  004F  1803               	skipnc
   947  0050  3001               	movlw	1
   948  0051  00F1               	movwf	??_isr+1
   949  0052  0871               	movf	??_isr+1,w
   950  0053  3A80               	xorlw	128
   951  0054  3C80               	sublw	128
   952  0055  1D03               	skipz
   953  0056  2859               	goto	u53_25
   954  0057  0870               	movf	??_isr,w
   955  0058  0276               	subwf	_buttonCountB,w	;volatile
   956  0059                     u53_25:	
   957  0059  1803               	skipnc
   958  005A  285F               	goto	i1l815
   959  005B  3001               	movlw	1
   960  005C  00F0               	movwf	??_isr
   961  005D  0870               	movf	??_isr,w
   962  005E  07F6               	addwf	_buttonCountB,f	;volatile
   963  005F                     i1l815:	
   964                           
   965                           ;main.c: 65: if (!PORTAbits.RA4) buttonCountB = 0;
   966  005F  0020               	movlb	0	; select bank0
   967  0060  1E0C               	btfss	12,4	;volatile
   968  0061  01F6               	clrf	_buttonCountB	;volatile
   969                           
   970                           ;main.c: 69: (buttonCountA > buttonSampleThresh) ? buttonA = 1 : buttonA = 0;
   971  0062  30B1               	movlw	low (_buttonSampleThresh| (0+32768))
   972  0063  0084               	movwf	4
   973  0064  3081               	movlw	high (_buttonSampleThresh| (0+32768))
   974  0065  0085               	movwf	5
   975  0066  0800               	movf	0,w	;code access
   976  0067  00F0               	movwf	??_isr
   977  0068  0877               	movf	_buttonCountA,w	;volatile
   978  0069  0270               	subwf	??_isr,w
   979  006A  1803               	skipnc
   980  006B  2871               	goto	i1l823
   981  006C  3001               	movlw	1
   982  006D  00F0               	movwf	??_isr
   983  006E  0870               	movf	??_isr,w
   984  006F  00AF               	movwf	_buttonA	;volatile
   985  0070  2872               	goto	i1l825
   986  0071                     i1l823:	
   987  0071  01AF               	clrf	_buttonA	;volatile
   988  0072                     i1l825:	
   989                           
   990                           ;main.c: 70: (buttonCountB > buttonSampleThresh) ? buttonB = 1 : buttonB = 0;
   991  0072  30B1               	movlw	low (_buttonSampleThresh| (0+32768))
   992  0073  0084               	movwf	4
   993  0074  3081               	movlw	high (_buttonSampleThresh| (0+32768))
   994  0075  0085               	movwf	5
   995  0076  0800               	movf	0,w	;code access
   996  0077  00F0               	movwf	??_isr
   997  0078  0876               	movf	_buttonCountB,w	;volatile
   998  0079  0270               	subwf	??_isr,w
   999  007A  1803               	skipnc
  1000  007B  2881               	goto	i1l829
  1001  007C  3001               	movlw	1
  1002  007D  00F0               	movwf	??_isr
  1003  007E  0870               	movf	??_isr,w
  1004  007F  00AE               	movwf	_buttonB	;volatile
  1005  0080  2882               	goto	i1l65
  1006  0081                     i1l829:	
  1007  0081  01AE               	clrf	_buttonB	;volatile
  1008  0082                     i1l65:	
  1009  0082  0872               	movf	??_isr+2,w
  1010  0083  00FF               	movwf	127
  1011  0084  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1012  0085  0009               	retfie
  1013  0086                     __end_of_isr:	
  1014  007E                     btemp	set	126	;btemp
  1015  007E                     int$flags	set	126
  1016  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    23
    Data        4
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     14      18
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0     556
                                              3 COMMON     3     3      0
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      E      12       6       22.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      1D       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jul 03 22:30:03 2018

                        l94 0116                          l95 010F                          l98 0124  
                       l903 00F2                         l913 0107                         l905 00F3  
                       l931 012D                         l933 0131                         l871 00C7  
                       l863 00BD                         l881 00D2                         l873 00C8  
                       l865 00BE                         l857 00B3                         l947 018A  
                       l887 00DB                         l879 00D1                         l889 00DC  
                       l899 00EC                         u700 00FF                         u710 0100  
                       u814 0143                         u815 0142                         u834 0160  
                       u835 015F                         u844 0170                         u845 016F  
                       u854 0186                         u855 0185                         u877 018D  
                       _isr 0004                         wreg 0009                __CFG_LVP$OFF 0000  
                      ?_isr 0070                        _T0IE 005D                        _T0IF 005A  
                      i1l65 0082                        _WPUA 020C                        _main 0097  
                      fsr0h 0005                        indf0 0000                        fsr0l 0004  
                      btemp 007E                        start 0086                       ??_isr 0070  
        main@buttonPressedA 002A          main@buttonPressedB 002B                       ?_main 0070  
             __CFG_WDTE$OFF 0000                       i1l805 0042                       i1l823 0071  
                     i1l815 005F                       i1l825 0072                       i1l829 0081  
                     i1l793 001D                       i1l789 0016                       u50_25 003C  
                     _PORTA 000C                       u53_25 0059                       _TRISA 008C  
                     _count 0078                       main@i 002C                       status 0003  
                     wtemp0 007E              __CFG_MCLRE$OFF 0000             __initialization 0087  
              __end_of_main 0197         main@buttonReleasedA 0020         main@buttonReleasedB 0021  
                    ??_main 0073                      _ADCON0 009D                      _ANSELA 018C  
                    _INTCON 000B                      _OSCCON 0099                      _period 007A  
                    _number 0030                __pdataCOMMON 0079     __end_of__initialization 0094  
            __pcstackCOMMON 0070                __pidataBANK0 01AF                  __pbssBANK0 002E  
            main@dispNumber 0028                  __pmaintext 0097                  __pintentry 0004  
            main@buttonBoth 0024                     _buttonA 002F                     _buttonB 002E  
              __size_of_isr 0082              main@singleStep 0029        end_of_initialization 0094  
                 _PORTAbits 000C            __CFG_FOSC$INTOSC 0000  __end_of_buttonSampleThresh 01B2  
             __pidataCOMMON 01AD         start_initialization 0087                 __end_of_isr 0086  
               __pdataBANK0 0030                 __pbssCOMMON 0076                   ___latbits 0000  
             __pcstackBANK0 0020                _buttonCountA 0077                _buttonCountB 0076  
                 _newPeriod 0031        __end_ofmain@PIN_HIGH 01AD                   main@bitOn 0022  
           main@buttonPrevA 0026             main@buttonPrevB 0027          _buttonSampleThresh 01B1  
              _sampleButton 0079                    _main$211 0025               __size_of_main 0100  
       __end_ofmain@PIN_LOW 01A2                    int$flags 007E                    intlevel1 0000  
             __pstringtext1 01B1               __pstringtext2 0197               __pstringtext3 01A2  
                _OPTION_REG 0095                main@PIN_HIGH 01A2                 main@PIN_LOW 0197  
