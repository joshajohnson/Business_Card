

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 05 17:39:20 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC12F1822 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  008C                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0097                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009E                     	;# 
    96  010C                     	;# 
    97  0111                     	;# 
    98  0112                     	;# 
    99  0115                     	;# 
   100  0116                     	;# 
   101  0117                     	;# 
   102  0118                     	;# 
   103  0119                     	;# 
   104  011A                     	;# 
   105  011B                     	;# 
   106  011D                     	;# 
   107  011D                     	;# 
   108  018C                     	;# 
   109  0191                     	;# 
   110  0191                     	;# 
   111  0192                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0193                     	;# 
   115  0194                     	;# 
   116  0195                     	;# 
   117  0196                     	;# 
   118  0199                     	;# 
   119  019A                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019B                     	;# 
   124  019C                     	;# 
   125  019C                     	;# 
   126  019D                     	;# 
   127  019E                     	;# 
   128  019F                     	;# 
   129  020C                     	;# 
   130  0211                     	;# 
   131  0211                     	;# 
   132  0212                     	;# 
   133  0212                     	;# 
   134  0213                     	;# 
   135  0213                     	;# 
   136  0214                     	;# 
   137  0214                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0215                     	;# 
   141  0216                     	;# 
   142  0216                     	;# 
   143  0217                     	;# 
   144  0217                     	;# 
   145  0291                     	;# 
   146  0291                     	;# 
   147  0292                     	;# 
   148  0293                     	;# 
   149  0294                     	;# 
   150  0295                     	;# 
   151  0295                     	;# 
   152  0296                     	;# 
   153  0391                     	;# 
   154  0392                     	;# 
   155  0393                     	;# 
   156  039A                     	;# 
   157  039C                     	;# 
   158  039D                     	;# 
   159  039E                     	;# 
   160  039F                     	;# 
   161  0FE4                     	;# 
   162  0FE5                     	;# 
   163  0FE6                     	;# 
   164  0FE7                     	;# 
   165  0FE8                     	;# 
   166  0FE9                     	;# 
   167  0FEA                     	;# 
   168  0FEB                     	;# 
   169  0FED                     	;# 
   170  0FEE                     	;# 
   171  0FEF                     	;# 
   172                           
   173                           	psect	idataCOMMON
   174  01AE                     __pidataCOMMON:	
   175                           
   176                           ;initializer for _sampleButton
   177  01AE  3401               	retlw	1
   178                           
   179                           ;initializer for _countUp
   180  01AF  3401               	retlw	1
   181                           
   182                           ;initializer for _period
   183  01B0  3401               	retlw	1
   184                           
   185                           	psect	idataBANK0
   186  01B1                     __pidataBANK0:	
   187                           
   188                           ;initializer for _number
   189  01B1  3401               	retlw	1
   190                           
   191                           ;initializer for _newPeriod
   192  01B2  3401               	retlw	1
   193                           
   194                           	psect	stringtext1
   195  018B                     __pstringtext1:	
   196  018B                     main@timingPeriods:	
   197  018B  34F0               	retlw	240
   198  018C  3478               	retlw	120
   199  018D  345A               	retlw	90
   200  018E  3446               	retlw	70
   201  018F  3437               	retlw	55
   202  0190  3428               	retlw	40
   203  0191  341E               	retlw	30
   204  0192  3419               	retlw	25
   205  0193  340F               	retlw	15
   206  0194  3407               	retlw	7
   207  0195  3403               	retlw	3
   208  0196  3401               	retlw	1
   209  0197  3400               	retlw	0
   210  0198                     __end_ofmain@timingPeriods:	
   211                           
   212                           	psect	stringtext2
   213  01B3                     __pstringtext2:	
   214  01B3                     _buttonSampleThresh:	
   215  01B3  3405               	retlw	5
   216  01B4                     __end_of_buttonSampleThresh:	
   217                           
   218                           	psect	stringtext3
   219  0198                     __pstringtext3:	
   220  0198                     displayNumber@pinLow:	
   221  0198  3401               	retlw	1
   222  0199  3400               	retlw	0
   223  019A  3402               	retlw	2
   224  019B  3401               	retlw	1
   225  019C  3405               	retlw	5
   226  019D  3402               	retlw	2
   227  019E  3405               	retlw	5
   228  019F  3401               	retlw	1
   229  01A0  3402               	retlw	2
   230  01A1  3400               	retlw	0
   231  01A2  3400               	retlw	0
   232  01A3                     __end_ofdisplayNumber@pinLow:	
   233                           
   234                           	psect	stringtext4
   235  01A3                     __pstringtext4:	
   236  01A3                     displayNumber@pinHigh:	
   237  01A3  3400               	retlw	0
   238  01A4  3401               	retlw	1
   239  01A5  3401               	retlw	1
   240  01A6  3402               	retlw	2
   241  01A7  3402               	retlw	2
   242  01A8  3405               	retlw	5
   243  01A9  3401               	retlw	1
   244  01AA  3405               	retlw	5
   245  01AB  3400               	retlw	0
   246  01AC  3402               	retlw	2
   247  01AD  3407               	retlw	7
   248  01AE                     __end_ofdisplayNumber@pinHigh:	
   249  000B                     _INTCON	set	11
   250  000C                     _PORTA	set	12
   251  000C                     _PORTAbits	set	12
   252  005A                     _T0IF	set	90
   253  005D                     _T0IE	set	93
   254  0095                     _OPTION_REG	set	149
   255  009D                     _ADCON0	set	157
   256  0099                     _OSCCON	set	153
   257  008C                     _TRISA	set	140
   258  018C                     _ANSELA	set	396
   259  020C                     _WPUA	set	524
   260                           
   261                           ; #config settings
   262  0000                     
   263                           	psect	cinit
   264  0063                     start_initialization:	
   265  0063                     __initialization:	
   266                           
   267                           ; Initialize objects allocated to COMMON
   268  0063  21AE               	fcall	__pidataCOMMON	;fetch initializer
   269  0064  00F8               	movwf	__pdataCOMMON& (0+127)
   270  0065  21AF               	fcall	__pidataCOMMON+1	;fetch initializer
   271  0066  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   272  0067  21B0               	fcall	__pidataCOMMON+2	;fetch initializer
   273  0068  00FA               	movwf	(__pdataCOMMON+2)& (0+127)
   274                           
   275                           ; Initialize objects allocated to BANK0
   276  0069  21B1               	fcall	__pidataBANK0	;fetch initializer
   277  006A  00B1               	movwf	__pdataBANK0& (0+127)
   278  006B  21B2               	fcall	__pidataBANK0+1	;fetch initializer
   279  006C  00B2               	movwf	(__pdataBANK0+1)& (0+127)
   280                           
   281                           ; Clear objects allocated to COMMON
   282  006D  01F5               	clrf	__pbssCOMMON& (0+127)
   283  006E  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   284  006F  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   285                           
   286                           ; Clear objects allocated to BANK0
   287  0070  01AF               	clrf	__pbssBANK0& (0+127)
   288  0071  01B0               	clrf	(__pbssBANK0+1)& (0+127)
   289  0072                     end_of_initialization:	
   290                           ;End of C runtime variable initialization code
   291                           
   292  0072                     __end_of__initialization:	
   293  0072  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   294  0073  0020               	movlb	0
   295  0074  2875               	ljmp	_main	;jump to C main() function
   296                           
   297                           	psect	bssCOMMON
   298  0075                     __pbssCOMMON:	
   299  0075                     _buttonCountB:	
   300  0075                     	ds	1
   301  0076                     _buttonCountA:	
   302  0076                     	ds	1
   303  0077                     _count:	
   304  0077                     	ds	1
   305                           
   306                           	psect	dataCOMMON
   307  0078                     __pdataCOMMON:	
   308  0078                     _sampleButton:	
   309  0078                     	ds	1
   310  0079                     _countUp:	
   311  0079                     	ds	1
   312  007A                     _period:	
   313  007A                     	ds	1
   314                           
   315                           	psect	bssBANK0
   316  002F                     __pbssBANK0:	
   317  002F                     _buttonB:	
   318  002F                     	ds	1
   319  0030                     _buttonA:	
   320  0030                     	ds	1
   321                           
   322                           	psect	dataBANK0
   323  0031                     __pdataBANK0:	
   324  0031                     _number:	
   325  0031                     	ds	1
   326  0032                     _newPeriod:	
   327  0032                     	ds	1
   328                           
   329                           	psect	cstackCOMMON
   330  0070                     __pcstackCOMMON:	
   331  0070                     ?_isr:	
   332  0070                     ??_isr:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_displayNumber:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_main:	
   339                           ; 1 bytes @ 0x0
   340                           
   341                           
   342                           ; 1 bytes @ 0x0
   343  0070                     	ds	2
   344  0072                     ??_displayNumber:	
   345                           
   346                           ; 1 bytes @ 0x2
   347  0072                     	ds	2
   348  0074                     displayNumber@i:	
   349                           
   350                           ; 1 bytes @ 0x4
   351  0074                     	ds	1
   352                           
   353                           	psect	cstackBANK0
   354  0020                     __pcstackBANK0:	
   355  0020                     ??_main:	
   356                           
   357                           ; 1 bytes @ 0x0
   358  0020                     	ds	2
   359  0022                     main@buttonReleasedA:	
   360                           
   361                           ; 1 bytes @ 0x2
   362  0022                     	ds	1
   363  0023                     main@buttonReleasedB:	
   364                           
   365                           ; 1 bytes @ 0x3
   366  0023                     	ds	1
   367  0024                     main@buttonBoth:	
   368                           
   369                           ; 1 bytes @ 0x4
   370  0024                     	ds	1
   371  0025                     main@bitOn:	
   372                           
   373                           ; 1 bytes @ 0x5
   374  0025                     	ds	1
   375  0026                     _main$216:	
   376                           
   377                           ; 1 bytes @ 0x6
   378  0026                     	ds	1
   379  0027                     main@buttonPrevA:	
   380                           
   381                           ; 1 bytes @ 0x7
   382  0027                     	ds	1
   383  0028                     main@buttonPrevB:	
   384                           
   385                           ; 1 bytes @ 0x8
   386  0028                     	ds	1
   387  0029                     main@dispNumber:	
   388                           
   389                           ; 1 bytes @ 0x9
   390  0029                     	ds	1
   391  002A                     main@index:	
   392                           
   393                           ; 1 bytes @ 0xA
   394  002A                     	ds	1
   395  002B                     main@singleStep:	
   396                           
   397                           ; 1 bytes @ 0xB
   398  002B                     	ds	1
   399  002C                     main@i:	
   400                           
   401                           ; 1 bytes @ 0xC
   402  002C                     	ds	1
   403  002D                     main@buttonPressedA:	
   404                           
   405                           ; 1 bytes @ 0xD
   406  002D                     	ds	1
   407  002E                     main@buttonPressedB:	
   408                           
   409                           ; 1 bytes @ 0xE
   410  002E                     	ds	1
   411                           
   412                           	psect	maintext
   413  0075                     __pmaintext:	
   414 ;;
   415 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   416 ;;
   417 ;; *************** function _main *****************
   418 ;; Defined at:
   419 ;;		line 96 in file "main.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  bitOn           1    5[BANK0 ] unsigned char 
   424 ;;  i               1   12[BANK0 ] char 
   425 ;;  buttonBoth      1    4[BANK0 ] unsigned char 
   426 ;;  buttonPresse    1   14[BANK0 ] unsigned char 
   427 ;;  buttonPresse    1   13[BANK0 ] unsigned char 
   428 ;;  singleStep      1   11[BANK0 ] unsigned char 
   429 ;;  index           1   10[BANK0 ] unsigned char 
   430 ;;  dispNumber      1    9[BANK0 ] unsigned char 
   431 ;;  buttonPrevB     1    8[BANK0 ] unsigned char 
   432 ;;  buttonPrevA     1    7[BANK0 ] unsigned char 
   433 ;;  buttonReleas    1    3[BANK0 ] unsigned char 
   434 ;;  buttonReleas    1    2[BANK0 ] unsigned char 
   435 ;; Return value:  Size  Location     Type
   436 ;;                  1    wreg      void 
   437 ;; Registers used:
   438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : B1F/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMMON   BANK0   BANK1
   444 ;;      Params:         0       0       0
   445 ;;      Locals:         0      13       0
   446 ;;      Temps:          0       2       0
   447 ;;      Totals:         0      15       0
   448 ;;Total ram usage:       15 bytes
   449 ;; Hardware stack levels required when called:    2
   450 ;; This function calls:
   451 ;;		_displayNumber
   452 ;; This function is called by:
   453 ;;		Startup code after reset
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           
   458                           ;psect for function _main
   459  0075                     _main:	
   460                           
   461                           ;main.c: 100: OSCCON = 0b11110000;
   462                           
   463                           ;incstack = 0
   464                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   465  0075  30F0               	movlw	240
   466  0076  0021               	movlb	1	; select bank1
   467  0077  0099               	movwf	25	;volatile
   468                           
   469                           ;main.c: 101: ANSELA = 0;
   470  0078  0023               	movlb	3	; select bank3
   471  0079  018C               	clrf	12	;volatile
   472                           
   473                           ;main.c: 102: ADCON0 = 0;
   474  007A  0021               	movlb	1	; select bank1
   475  007B  019D               	clrf	29	;volatile
   476                           
   477                           ;main.c: 103: TRISA = (1<<3)|(1<<4);
   478  007C  3018               	movlw	24
   479  007D  008C               	movwf	12	;volatile
   480                           
   481                           ;main.c: 104: PORTA = 0;
   482  007E  0020               	movlb	0	; select bank0
   483  007F  018C               	clrf	12	;volatile
   484                           
   485                           ;main.c: 105: WPUA = 0;
   486  0080  0024               	movlb	4	; select bank4
   487  0081  018C               	clrf	12	;volatile
   488                           
   489                           ;main.c: 108: OPTION_REG = 0b10000110;
   490  0082  3086               	movlw	134
   491  0083  0021               	movlb	1	; select bank1
   492  0084  0095               	movwf	21	;volatile
   493                           
   494                           ;main.c: 109: INTCON = 0b10100000;
   495  0085  30A0               	movlw	160
   496  0086  008B               	movwf	11	;volatile
   497                           
   498                           ;main.c: 113: static const unsigned char timingPeriods[13] = {240,120,90,70,55,40,30,25,
      +                          15,7,3,1,0};
   499                           ;main.c: 116: unsigned char singleStep = 0;
   500  0087  0020               	movlb	0	; select bank0
   501  0088  01AB               	clrf	main@singleStep
   502                           
   503                           ;main.c: 117: unsigned char dispNumber = 1;
   504  0089  01A9               	clrf	main@dispNumber
   505  008A  0AA9               	incf	main@dispNumber,f
   506                           
   507                           ;main.c: 118: unsigned char index = 0;
   508  008B  01AA               	clrf	main@index
   509                           
   510                           ;main.c: 121: unsigned char buttonPrevA = 0;
   511  008C  01A7               	clrf	main@buttonPrevA
   512                           
   513                           ;main.c: 122: unsigned char buttonPrevB = 0;
   514  008D  01A8               	clrf	main@buttonPrevB
   515                           
   516                           ;main.c: 123: unsigned char buttonPressedA = 0;
   517  008E  01AD               	clrf	main@buttonPressedA
   518                           
   519                           ;main.c: 124: unsigned char buttonPressedB = 0;
   520  008F  01AE               	clrf	main@buttonPressedB
   521                           
   522                           ;main.c: 125: unsigned char buttonReleasedA = 0;
   523  0090  01A2               	clrf	main@buttonReleasedA
   524                           
   525                           ;main.c: 126: unsigned char buttonReleasedB = 0;
   526  0091  01A3               	clrf	main@buttonReleasedB
   527  0092                     l1059:	
   528                           ;main.c: 128: while(1)
   529                           
   530                           
   531                           ;main.c: 129: {
   532                           ;main.c: 135: (buttonPrevA == 1 && buttonA == 0) ? buttonPressedA = 1 : buttonPressedA =
      +                           0;
   533  0092  0020               	movlb	0	; select bank0
   534  0093  0327               	decf	main@buttonPrevA,w
   535  0094  1D03               	btfss	3,2
   536  0095  289C               	goto	l1065
   537  0096  0830               	movf	_buttonA,w	;volatile
   538  0097  1D03               	btfss	3,2
   539  0098  289C               	goto	l1065
   540  0099  01AD               	clrf	main@buttonPressedA
   541  009A  0AAD               	incf	main@buttonPressedA,f
   542  009B  289D               	goto	l1067
   543  009C                     l1065:	
   544  009C  01AD               	clrf	main@buttonPressedA
   545  009D                     l1067:	
   546                           
   547                           ;main.c: 136: (buttonPrevB == 1 && buttonB == 0) ? buttonPressedB = 1 : buttonPressedB =
      +                           0;
   548  009D  0328               	decf	main@buttonPrevB,w
   549  009E  1D03               	btfss	3,2
   550  009F  28A6               	goto	l1073
   551  00A0  082F               	movf	_buttonB,w	;volatile
   552  00A1  1D03               	btfss	3,2
   553  00A2  28A6               	goto	l1073
   554  00A3  01AE               	clrf	main@buttonPressedB
   555  00A4  0AAE               	incf	main@buttonPressedB,f
   556  00A5  28A7               	goto	l1075
   557  00A6                     l1073:	
   558  00A6  01AE               	clrf	main@buttonPressedB
   559  00A7                     l1075:	
   560                           
   561                           ;main.c: 138: (buttonPrevA == 0 && buttonA == 1) ? buttonReleasedA = 1 : buttonReleasedA
      +                           = 0;
   562  00A7  0827               	movf	main@buttonPrevA,w
   563  00A8  1D03               	btfss	3,2
   564  00A9  28B0               	goto	l1081
   565  00AA  0330               	decf	_buttonA,w	;volatile
   566  00AB  1D03               	btfss	3,2
   567  00AC  28B0               	goto	l1081
   568  00AD  01A2               	clrf	main@buttonReleasedA
   569  00AE  0AA2               	incf	main@buttonReleasedA,f
   570  00AF  28B1               	goto	l1083
   571  00B0                     l1081:	
   572  00B0  01A2               	clrf	main@buttonReleasedA
   573  00B1                     l1083:	
   574                           
   575                           ;main.c: 139: (buttonPrevB == 0 && buttonB == 1) ? buttonReleasedB = 1 : buttonReleasedB
      +                           = 0;
   576  00B1  0828               	movf	main@buttonPrevB,w
   577  00B2  1D03               	btfss	3,2
   578  00B3  28BA               	goto	l1089
   579  00B4  032F               	decf	_buttonB,w	;volatile
   580  00B5  1D03               	btfss	3,2
   581  00B6  28BA               	goto	l1089
   582  00B7  01A3               	clrf	main@buttonReleasedB
   583  00B8  0AA3               	incf	main@buttonReleasedB,f
   584  00B9  28BB               	goto	l1091
   585  00BA                     l1089:	
   586  00BA  01A3               	clrf	main@buttonReleasedB
   587  00BB                     l1091:	
   588                           
   589                           ;main.c: 141: buttonPrevA = buttonA;
   590  00BB  0830               	movf	_buttonA,w	;volatile
   591  00BC  00A0               	movwf	??_main
   592  00BD  0820               	movf	??_main,w
   593  00BE  00A7               	movwf	main@buttonPrevA
   594                           
   595                           ;main.c: 142: buttonPrevB = buttonB;
   596  00BF  082F               	movf	_buttonB,w	;volatile
   597  00C0  00A0               	movwf	??_main
   598  00C1  0820               	movf	??_main,w
   599  00C2  00A8               	movwf	main@buttonPrevB
   600                           
   601                           ;main.c: 145: unsigned char buttonBoth = (unsigned char) ((!buttonA && buttonPressedB) |
      +                          | (!buttonB && buttonPressedA) || (buttonPressedA && buttonPressedB));
   602  00C3  01A6               	clrf	_main$216
   603  00C4  0AA6               	incf	_main$216,f
   604  00C5  0830               	movf	_buttonA,w	;volatile
   605  00C6  1D03               	btfss	3,2
   606  00C7  28CB               	goto	l1101
   607  00C8  082E               	movf	main@buttonPressedB,w
   608  00C9  1D03               	btfss	3,2
   609  00CA  28D6               	goto	l1111
   610  00CB                     l1101:	
   611  00CB  082F               	movf	_buttonB,w	;volatile
   612  00CC  1D03               	btfss	3,2
   613  00CD  28D1               	goto	l1105
   614  00CE  082D               	movf	main@buttonPressedA,w
   615  00CF  1D03               	btfss	3,2
   616  00D0  28D6               	goto	l1111
   617  00D1                     l1105:	
   618  00D1  082D               	movf	main@buttonPressedA,w
   619  00D2  1D03               	btfss	3,2
   620  00D3  082E               	movf	main@buttonPressedB,w
   621  00D4  1903               	btfsc	3,2
   622  00D5  01A6               	clrf	_main$216
   623  00D6                     l1111:	
   624  00D6  0826               	movf	_main$216,w
   625  00D7  00A0               	movwf	??_main
   626  00D8  0820               	movf	??_main,w
   627  00D9  00A4               	movwf	main@buttonBoth
   628                           
   629                           ;main.c: 148: if (buttonBoth)
   630  00DA  0824               	movf	main@buttonBoth,w
   631  00DB  1903               	btfsc	3,2
   632  00DC  28EA               	goto	l1119
   633                           
   634                           ;main.c: 149: {
   635                           ;main.c: 150: singleStep = !singleStep;
   636  00DD  082B               	movf	main@singleStep,w
   637  00DE  1D03               	btfss	3,2
   638  00DF  28E2               	goto	u1080
   639  00E0  3001               	movlw	1
   640  00E1  28E3               	goto	u1090
   641  00E2                     u1080:	
   642  00E2  3000               	movlw	0
   643  00E3                     u1090:	
   644  00E3  00A0               	movwf	??_main
   645  00E4  0820               	movf	??_main,w
   646  00E5  00AB               	movwf	main@singleStep
   647                           
   648                           ;main.c: 151: number = dispNumber;
   649  00E6  0829               	movf	main@dispNumber,w
   650  00E7  00A0               	movwf	??_main
   651  00E8  0820               	movf	??_main,w
   652  00E9  00B1               	movwf	_number	;volatile
   653  00EA                     l1119:	
   654                           
   655                           ;main.c: 152: }
   656                           ;main.c: 157: if (singleStep)
   657  00EA  082B               	movf	main@singleStep,w
   658  00EB  1903               	btfsc	3,2
   659  00EC  28F9               	goto	l101
   660                           
   661                           ;main.c: 158: {
   662                           ;main.c: 159: if (buttonPressedA) dispNumber--;
   663  00ED  082D               	movf	main@buttonPressedA,w
   664  00EE  1903               	btfsc	3,2
   665  00EF  28F2               	goto	l102
   666  00F0  3001               	movlw	1
   667  00F1  02A9               	subwf	main@dispNumber,f
   668  00F2                     l102:	
   669                           
   670                           ;main.c: 160: if (buttonPressedB) dispNumber++;
   671  00F2  082E               	movf	main@buttonPressedB,w
   672  00F3  1903               	btfsc	3,2
   673  00F4  28F9               	goto	l101
   674  00F5  3001               	movlw	1
   675  00F6  00A0               	movwf	??_main
   676  00F7  0820               	movf	??_main,w
   677  00F8  07A9               	addwf	main@dispNumber,f
   678  00F9                     l101:	
   679                           
   680                           ;main.c: 161: }
   681                           ;main.c: 166: if (!singleStep)
   682  00F9  082B               	movf	main@singleStep,w
   683  00FA  1D03               	btfss	3,2
   684  00FB  291E               	goto	l1141
   685                           
   686                           ;main.c: 167: {
   687                           ;main.c: 168: if (buttonPressedA && (index > 0)) index--;
   688  00FC  082D               	movf	main@buttonPressedA,w
   689  00FD  1903               	btfsc	3,2
   690  00FE  2904               	goto	l105
   691  00FF  082A               	movf	main@index,w
   692  0100  1903               	btfsc	3,2
   693  0101  2904               	goto	l105
   694  0102  3001               	movlw	1
   695  0103  02AA               	subwf	main@index,f
   696  0104                     l105:	
   697                           
   698                           ;main.c: 169: if (buttonPressedB && (index < 13 - 1)) index ++;
   699  0104  082E               	movf	main@buttonPressedB,w
   700  0105  1903               	btfsc	3,2
   701  0106  290F               	goto	l1137
   702  0107  300C               	movlw	12
   703  0108  022A               	subwf	main@index,w
   704  0109  1803               	skipnc
   705  010A  290F               	goto	l1137
   706  010B  3001               	movlw	1
   707  010C  00A0               	movwf	??_main
   708  010D  0820               	movf	??_main,w
   709  010E  07AA               	addwf	main@index,f
   710  010F                     l1137:	
   711                           
   712                           ;main.c: 171: newPeriod = timingPeriods[index];
   713  010F  082A               	movf	main@index,w
   714  0110  3E8B               	addlw	low (main@timingPeriods| (0+32768))
   715  0111  0084               	movwf	4
   716  0112  3081               	movlw	high (main@timingPeriods| (0+32768))
   717  0113  1803               	skipnc
   718  0114  3E01               	addlw	1
   719  0115  0085               	movwf	5
   720  0116  0800               	movf	0,w	;code access
   721  0117  00A0               	movwf	??_main
   722  0118  0820               	movf	??_main,w
   723  0119  00B2               	movwf	_newPeriod	;volatile
   724                           
   725                           ;main.c: 172: dispNumber = number;
   726  011A  0831               	movf	_number,w	;volatile
   727  011B  00A0               	movwf	??_main
   728  011C  0820               	movf	??_main,w
   729  011D  00A9               	movwf	main@dispNumber
   730  011E                     l1141:	
   731                           
   732                           ;main.c: 173: }
   733                           ;main.c: 179: for(signed char i = 7; i >= 0; i--)
   734  011E  3007               	movlw	7
   735  011F  00A0               	movwf	??_main
   736  0120  0820               	movf	??_main,w
   737  0121  00AC               	movwf	main@i
   738  0122  1BAC               	btfsc	main@i,7
   739  0123  293E               	goto	l1157
   740  0124                     l1147:	
   741                           
   742                           ;main.c: 180: {
   743                           ;main.c: 181: unsigned char bitOn = (unsigned char) ((dispNumber >> i) & 1);
   744  0124  0829               	movf	main@dispNumber,w
   745  0125  00A0               	movwf	??_main
   746  0126  0A2C               	incf	main@i,w
   747  0127  2929               	goto	u1194
   748  0128                     u1195:	
   749  0128  36A0               	lsrf	??_main,f
   750  0129                     u1194:	
   751  0129  0B89               	decfsz	9,f
   752  012A  2928               	goto	u1195
   753  012B  0820               	movf	??_main,w
   754  012C  3901               	andlw	1
   755  012D  00A1               	movwf	??_main+1
   756  012E  0821               	movf	??_main+1,w
   757  012F  00A5               	movwf	main@bitOn
   758                           
   759                           ;main.c: 182: (bitOn) ? displayNumber(i) : displayNumber(10);
   760  0130  0825               	movf	main@bitOn,w
   761  0131  1903               	btfsc	3,2
   762  0132  2935               	goto	l1151
   763  0133  082C               	movf	main@i,w
   764  0134  2936               	goto	L1
   765  0135                     l1151:	
   766  0135  300A               	movlw	10
   767  0136                     L1:	
   768  0136  2147               	fcall	_displayNumber
   769  0137  30FF               	movlw	255
   770  0138  0020               	movlb	0	; select bank0
   771  0139  00A0               	movwf	??_main
   772  013A  0820               	movf	??_main,w
   773  013B  07AC               	addwf	main@i,f
   774  013C  1FAC               	btfss	main@i,7
   775  013D  2924               	goto	l1147
   776  013E                     l1157:	
   777                           
   778                           ;main.c: 183: }
   779                           ;main.c: 185: (singleStep) ? displayNumber(8) : displayNumber(9);
   780  013E  082B               	movf	main@singleStep,w
   781  013F  1903               	btfsc	3,2
   782  0140  2944               	goto	l1161
   783  0141  3008               	movlw	8
   784  0142  2147               	fcall	_displayNumber
   785  0143  2892               	goto	l1059
   786  0144                     l1161:	
   787  0144  3009               	movlw	9
   788  0145  2147               	fcall	_displayNumber
   789  0146  2892               	goto	l1059
   790  0147                     __end_of_main:	
   791                           
   792                           	psect	text1
   793  0147                     __ptext1:	
   794 ;; *************** function _displayNumber *****************
   795 ;; Defined at:
   796 ;;		line 78 in file "main.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  i               1    wreg     char 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  i               1    4[COMMON] char 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMMON   BANK0   BANK1
   810 ;;      Params:         0       0       0
   811 ;;      Locals:         1       0       0
   812 ;;      Temps:          2       0       0
   813 ;;      Totals:         3       0       0
   814 ;;Total ram usage:        3 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    1
   817 ;; This function calls:
   818 ;;		Nothing
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           
   825                           ;psect for function _displayNumber
   826  0147                     _displayNumber:	
   827                           
   828                           ;incstack = 0
   829                           ; Regs used in _displayNumber: [wreg-fsr0h+status,2+status,0+pclath]
   830                           ;displayNumber@i stored from wreg
   831  0147  00F4               	movwf	displayNumber@i
   832                           
   833                           ;main.c: 83: static const unsigned char pinHigh[11] = {0,1,1,2,2,5,1,5,0,2,7};
   834                           ;main.c: 84: static const unsigned char pinLow[11] = {1,0,2,1,5,2,5,1,2,0,0};
   835                           ;main.c: 86: TRISA = 0xFF & ~(1<<pinLow[i]|1<<pinHigh[i]);
   836  0148  3001               	movlw	1
   837  0149  00F2               	movwf	??_displayNumber
   838  014A  0874               	movf	displayNumber@i,w
   839  014B  3EA3               	addlw	low (displayNumber@pinHigh| (0+32768))
   840  014C  0084               	movwf	4
   841  014D  3081               	movlw	high (displayNumber@pinHigh| (0+32768))
   842  014E  1803               	skipnc
   843  014F  3E01               	addlw	1
   844  0150  0085               	movwf	5
   845  0151  0800               	movf	0,w	;code access
   846  0152  0A89               	incf	9,f
   847  0153  2955               	goto	u474
   848  0154                     u475:	
   849  0154  35F2               	lslf	??_displayNumber,f
   850  0155                     u474:	
   851  0155  0B89               	decfsz	9,f
   852  0156  2954               	goto	u475
   853  0157  3001               	movlw	1
   854  0158  00F3               	movwf	??_displayNumber+1
   855  0159  0874               	movf	displayNumber@i,w
   856  015A  3E98               	addlw	low (displayNumber@pinLow| (0+32768))
   857  015B  0084               	movwf	4
   858  015C  3081               	movlw	high (displayNumber@pinLow| (0+32768))
   859  015D  1803               	skipnc
   860  015E  3E01               	addlw	1
   861  015F  0085               	movwf	5
   862  0160  0800               	movf	0,w	;code access
   863  0161  0A89               	incf	9,f
   864  0162  2964               	goto	u484
   865  0163                     u485:	
   866  0163  35F3               	lslf	??_displayNumber+1,f
   867  0164                     u484:	
   868  0164  0B89               	decfsz	9,f
   869  0165  2963               	goto	u485
   870  0166  0873               	movf	??_displayNumber+1,w
   871  0167  0472               	iorwf	??_displayNumber,w
   872  0168  3AFF               	xorlw	255
   873  0169  0021               	movlb	1	; select bank1
   874  016A  008C               	movwf	12	;volatile
   875                           
   876                           ;main.c: 87: PORTA = 0 | (1<<pinHigh[i]);
   877  016B  3001               	movlw	1
   878  016C  00F2               	movwf	??_displayNumber
   879  016D  0874               	movf	displayNumber@i,w
   880  016E  3EA3               	addlw	low (displayNumber@pinHigh| (0+32768))
   881  016F  0084               	movwf	4
   882  0170  3081               	movlw	high (displayNumber@pinHigh| (0+32768))
   883  0171  1803               	skipnc
   884  0172  3E01               	addlw	1
   885  0173  0085               	movwf	5
   886  0174  0800               	movf	0,w	;code access
   887  0175  0A89               	incf	9,f
   888  0176  2978               	goto	u494
   889  0177                     u495:	
   890  0177  35F2               	lslf	??_displayNumber,f
   891  0178                     u494:	
   892  0178  0B89               	decfsz	9,f
   893  0179  2977               	goto	u495
   894  017A  0872               	movf	??_displayNumber,w
   895  017B  0020               	movlb	0	; select bank0
   896  017C  008C               	movwf	12	;volatile
   897                           
   898                           ;main.c: 88: _delay((unsigned long)((600)*(8000000/4000000.0)));
   899  017D  30F0               	movlw	240
   900  017E                     u1237:	
   901  017E  3200               	nop2
   902  017F  0B89               	decfsz	9,f
   903  0180  297E               	goto	u1237
   904                           
   905                           ;main.c: 90: TRISA = (1<<3)|(1<<4);
   906  0181  3018               	movlw	24
   907  0182  0021               	movlb	1	; select bank1
   908  0183  008C               	movwf	12	;volatile
   909                           
   910                           ;main.c: 91: PORTA = 0;
   911  0184  0020               	movlb	0	; select bank0
   912  0185  018C               	clrf	12	;volatile
   913                           
   914                           ;main.c: 92: _delay((unsigned long)((100)*(8000000/4000000.0)));
   915  0186  3042               	movlw	66
   916  0187                     u1247:	
   917  0187  0B89               	decfsz	9,f
   918  0188  2987               	goto	u1247
   919  0189  3200               	nop2
   920  018A  0008               	return
   921  018B                     __end_of_displayNumber:	
   922                           
   923                           	psect	intentry
   924  0004                     __pintentry:	
   925 ;; *************** function _isr *****************
   926 ;; Defined at:
   927 ;;		line 27 in file "main.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;		None
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMMON   BANK0   BANK1
   941 ;;      Params:         0       0       0
   942 ;;      Locals:         0       0       0
   943 ;;      Temps:          2       0       0
   944 ;;      Totals:         2       0       0
   945 ;;Total ram usage:        2 bytes
   946 ;; Hardware stack levels used:    1
   947 ;; This function calls:
   948 ;;		Nothing
   949 ;; This function is called by:
   950 ;;		Interrupt level 1
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954  0004                     _isr:	
   955                           
   956                           ;incstack = 0
   957  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   958                           
   959                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath]
   960  0005  3180               	pagesel	$
   961  0006  0020               	movlb	0	; select bank0
   962  0007  087F               	movf	127,w
   963  0008  00F1               	movwf	??_isr+1
   964                           
   965                           ;main.c: 30: if(T0IE && T0IF)
   966  0009  1A8B               	btfsc	11,5	;volatile
   967  000A  1D0B               	btfss	11,2	;volatile
   968  000B  285E               	goto	i1l67
   969                           
   970                           ;main.c: 31: {
   971                           ;main.c: 32: T0IF = 0;
   972  000C  110B               	bcf	11,2	;volatile
   973                           
   974                           ;main.c: 40: if (count >= period)
   975  000D  087A               	movf	_period,w	;volatile
   976  000E  0277               	subwf	_count,w	;volatile
   977  000F  1C03               	skipc
   978  0010  2816               	goto	i1l851
   979                           
   980                           ;main.c: 41: {
   981                           ;main.c: 42: count = 0;
   982  0011  01F7               	clrf	_count	;volatile
   983                           
   984                           ;main.c: 43: number++;
   985  0012  3001               	movlw	1
   986  0013  00F0               	movwf	??_isr
   987  0014  0870               	movf	??_isr,w
   988  0015  07B1               	addwf	_number,f	;volatile
   989  0016                     i1l851:	
   990                           
   991                           ;main.c: 44: }
   992                           ;main.c: 46: if (!count) period = newPeriod;
   993  0016  0877               	movf	_count,w	;volatile
   994  0017  1D03               	btfss	3,2
   995  0018  281D               	goto	i1l855
   996  0019  0832               	movf	_newPeriod,w	;volatile
   997  001A  00F0               	movwf	??_isr
   998  001B  0870               	movf	??_isr,w
   999  001C  00FA               	movwf	_period	;volatile
  1000  001D                     i1l855:	
  1001                           
  1002                           ;main.c: 48: count++;
  1003  001D  3001               	movlw	1
  1004  001E  00F0               	movwf	??_isr
  1005  001F  0870               	movf	??_isr,w
  1006  0020  07F7               	addwf	_count,f	;volatile
  1007                           
  1008                           ;main.c: 57: sampleButton ^= 1;
  1009  0021  3001               	movlw	1
  1010  0022  00F0               	movwf	??_isr
  1011  0023  0870               	movf	??_isr,w
  1012  0024  06F8               	xorwf	_sampleButton,f	;volatile
  1013                           
  1014                           ;main.c: 59: if (sampleButton)
  1015  0025  0878               	movf	_sampleButton,w	;volatile
  1016  0026  1903               	btfsc	3,2
  1017  0027  285E               	goto	i1l67
  1018                           
  1019                           ;main.c: 60: {
  1020                           ;main.c: 63: if (PORTAbits.RA3 && (buttonCountA < 255)) buttonCountA++;
  1021  0028  1D8C               	btfss	12,3	;volatile
  1022  0029  2831               	goto	i1l867
  1023  002A  0A76               	incf	_buttonCountA,w	;volatile
  1024  002B  1903               	btfsc	3,2
  1025  002C  2831               	goto	i1l867
  1026  002D  3001               	movlw	1
  1027  002E  00F0               	movwf	??_isr
  1028  002F  0870               	movf	??_isr,w
  1029  0030  07F6               	addwf	_buttonCountA,f	;volatile
  1030  0031                     i1l867:	
  1031                           
  1032                           ;main.c: 64: if (!PORTAbits.RA3) buttonCountA = 0;
  1033  0031  1D8C               	btfss	12,3	;volatile
  1034  0032  01F6               	clrf	_buttonCountA	;volatile
  1035                           
  1036                           ;main.c: 66: if (PORTAbits.RA4 && (buttonCountB < 255)) buttonCountB++;
  1037  0033  1E0C               	btfss	12,4	;volatile
  1038  0034  283C               	goto	i1l877
  1039  0035  0A75               	incf	_buttonCountB,w	;volatile
  1040  0036  1903               	btfsc	3,2
  1041  0037  283C               	goto	i1l877
  1042  0038  3001               	movlw	1
  1043  0039  00F0               	movwf	??_isr
  1044  003A  0870               	movf	??_isr,w
  1045  003B  07F5               	addwf	_buttonCountB,f	;volatile
  1046  003C                     i1l877:	
  1047                           
  1048                           ;main.c: 67: if (!PORTAbits.RA4) buttonCountB = 0;
  1049  003C  1E0C               	btfss	12,4	;volatile
  1050  003D  01F5               	clrf	_buttonCountB	;volatile
  1051                           
  1052                           ;main.c: 70: (buttonCountA > buttonSampleThresh) ? buttonA = 1 : buttonA = 0;
  1053  003E  30B3               	movlw	low (_buttonSampleThresh| (0+32768))
  1054  003F  0084               	movwf	4
  1055  0040  3081               	movlw	high (_buttonSampleThresh| (0+32768))
  1056  0041  0085               	movwf	5
  1057  0042  0800               	movf	0,w	;code access
  1058  0043  00F0               	movwf	??_isr
  1059  0044  0876               	movf	_buttonCountA,w	;volatile
  1060  0045  0270               	subwf	??_isr,w
  1061  0046  1803               	skipnc
  1062  0047  284D               	goto	i1l885
  1063  0048  3001               	movlw	1
  1064  0049  00F0               	movwf	??_isr
  1065  004A  0870               	movf	??_isr,w
  1066  004B  00B0               	movwf	_buttonA	;volatile
  1067  004C  284E               	goto	i1l887
  1068  004D                     i1l885:	
  1069  004D  01B0               	clrf	_buttonA	;volatile
  1070  004E                     i1l887:	
  1071                           
  1072                           ;main.c: 71: (buttonCountB > buttonSampleThresh) ? buttonB = 1 : buttonB = 0;
  1073  004E  30B3               	movlw	low (_buttonSampleThresh| (0+32768))
  1074  004F  0084               	movwf	4
  1075  0050  3081               	movlw	high (_buttonSampleThresh| (0+32768))
  1076  0051  0085               	movwf	5
  1077  0052  0800               	movf	0,w	;code access
  1078  0053  00F0               	movwf	??_isr
  1079  0054  0875               	movf	_buttonCountB,w	;volatile
  1080  0055  0270               	subwf	??_isr,w
  1081  0056  1803               	skipnc
  1082  0057  285D               	goto	i1l891
  1083  0058  3001               	movlw	1
  1084  0059  00F0               	movwf	??_isr
  1085  005A  0870               	movf	??_isr,w
  1086  005B  00AF               	movwf	_buttonB	;volatile
  1087  005C  285E               	goto	i1l67
  1088  005D                     i1l891:	
  1089  005D  01AF               	clrf	_buttonB	;volatile
  1090  005E                     i1l67:	
  1091  005E  0871               	movf	??_isr+1,w
  1092  005F  00FF               	movwf	127
  1093  0060  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1094  0061  0009               	retfie
  1095  0062                     __end_of_isr:	
  1096  007E                     btemp	set	126	;btemp
  1097  007E                     int$flags	set	126
  1098  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    36
    Data        5
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      11
    BANK0            80     15      19
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_displayNumber

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    1027
                                              0 BANK0     15    15      0
                      _displayNumber
 ---------------------------------------------------------------------------------
 (1) _displayNumber                                        3     3      0      66
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _displayNumber

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      F      13       6       23.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      1E       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 05 17:39:20 2018

                         l101 00F9                           l102 00F2                           l105 0104  
                         u474 0155                           u475 0154                           u484 0164  
                         u485 0163                           u494 0178                           u495 0177  
                         _isr 0004                           wreg 0009                ?_displayNumber 0070  
                __CFG_LVP$OFF 0000                          l1101 00CB                          l1111 00D6  
                        l1105 00D1                          l1141 011E                          l1151 0135  
                        l1119 00EA                          l1161 0144                          l1137 010F  
                        l1081 00B0                          l1073 00A6                          l1065 009C  
                        l1147 0124                          l1091 00BB                          l1083 00B1  
                        l1075 00A7                          l1067 009D                          l1059 0092  
                        l1157 013E                          l1089 00BA                          ?_isr 0070  
                        _T0IE 005D                          _T0IF 005A                          u1080 00E2  
                        u1090 00E3                          u1237 017E                          u1247 0187  
                        u1194 0129                          u1195 0128                          i1l67 005E  
                        _WPUA 020C                          _main 0075                          fsr0h 0005  
                        indf0 0000                          fsr0l 0004                          btemp 007E  
                        start 0062                         ??_isr 0070            main@buttonPressedA 002D  
          main@buttonPressedB 002E                         ?_main 0070                 __CFG_WDTE$OFF 0000  
                       i1l851 0016                         i1l855 001D                         i1l891 005D  
                       i1l867 0031                         i1l885 004D                         i1l877 003C  
                       i1l887 004E                         _PORTA 000C                         _TRISA 008C  
                       _count 0077                         main@i 002C  __end_ofdisplayNumber@pinHigh 01AE  
                       status 0003                         wtemp0 007E                __CFG_MCLRE$OFF 0000  
             __initialization 0063                  __end_of_main 0147           displayNumber@pinLow 0198  
         main@buttonReleasedA 0022           main@buttonReleasedB 0023                        ??_main 0020  
             ??_displayNumber 0072                        _ADCON0 009D                        _ANSELA 018C  
                      _INTCON 000B                        _OSCCON 0099                        _period 007A  
                      _number 0031                  __pdataCOMMON 0078       __end_of__initialization 0072  
              __pcstackCOMMON 0070                  __pidataBANK0 01B1          displayNumber@pinHigh 01A3  
                  __pbssBANK0 002F                main@dispNumber 0029                    __pmaintext 0075  
                  __pintentry 0004                main@buttonBoth 0024                       __ptext1 0147  
                     _countUp 0079                       _buttonA 0030                       _buttonB 002F  
                __size_of_isr 005E                displayNumber@i 0074                main@singleStep 002B  
        end_of_initialization 0072                     _PORTAbits 000C              __CFG_FOSC$INTOSC 0000  
  __end_of_buttonSampleThresh 01B4         __end_of_displayNumber 018B                 __pidataCOMMON 01AE  
 __end_ofdisplayNumber@pinLow 01A3           start_initialization 0063                   __end_of_isr 0062  
                 __pdataBANK0 0031             main@timingPeriods 018B                   __pbssCOMMON 0075  
                   ___latbits 0000                 __pcstackBANK0 0020                  _buttonCountA 0076  
                _buttonCountB 0075     __end_ofmain@timingPeriods 0198                     _newPeriod 0032  
                   main@bitOn 0025               main@buttonPrevA 0027               main@buttonPrevB 0028  
                   main@index 002A            _buttonSampleThresh 01B3                  _sampleButton 0078  
                    _main$216 0026                 __size_of_main 00D2                      int$flags 007E  
      __size_of_displayNumber 0044                      intlevel1 0000                 __pstringtext1 018B  
               __pstringtext2 01B3                 __pstringtext3 0198                 __pstringtext4 01A3  
                  _OPTION_REG 0095                 _displayNumber 0147  
